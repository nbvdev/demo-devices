// Code generated by mockery v2.46.3. DO NOT EDIT.

package interfaces

import (
	model "devices/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// MockDeviceService is an autogenerated mock type for the DeviceService type
type MockDeviceService struct {
	mock.Mock
}

type MockDeviceService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeviceService) EXPECT() *MockDeviceService_Expecter {
	return &MockDeviceService_Expecter{mock: &_m.Mock}
}

// AddNew provides a mock function with given fields: device
func (_m *MockDeviceService) AddNew(device *model.Device) (*model.Device, error) {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for AddNew")
	}

	var r0 *model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Device) (*model.Device, error)); ok {
		return rf(device)
	}
	if rf, ok := ret.Get(0).(func(*model.Device) *model.Device); ok {
		r0 = rf(device)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Device) error); ok {
		r1 = rf(device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceService_AddNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNew'
type MockDeviceService_AddNew_Call struct {
	*mock.Call
}

// AddNew is a helper method to define mock.On call
//   - device *model.Device
func (_e *MockDeviceService_Expecter) AddNew(device interface{}) *MockDeviceService_AddNew_Call {
	return &MockDeviceService_AddNew_Call{Call: _e.mock.On("AddNew", device)}
}

func (_c *MockDeviceService_AddNew_Call) Run(run func(device *model.Device)) *MockDeviceService_AddNew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Device))
	})
	return _c
}

func (_c *MockDeviceService_AddNew_Call) Return(_a0 *model.Device, _a1 error) *MockDeviceService_AddNew_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceService_AddNew_Call) RunAndReturn(run func(*model.Device) (*model.Device, error)) *MockDeviceService_AddNew_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: deviceId
func (_m *MockDeviceService) Delete(deviceId int64) error {
	ret := _m.Called(deviceId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(deviceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeviceService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDeviceService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - deviceId int64
func (_e *MockDeviceService_Expecter) Delete(deviceId interface{}) *MockDeviceService_Delete_Call {
	return &MockDeviceService_Delete_Call{Call: _e.mock.On("Delete", deviceId)}
}

func (_c *MockDeviceService_Delete_Call) Run(run func(deviceId int64)) *MockDeviceService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDeviceService_Delete_Call) Return(_a0 error) *MockDeviceService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceService_Delete_Call) RunAndReturn(run func(int64) error) *MockDeviceService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: deviceId
func (_m *MockDeviceService) Get(deviceId int64) (*model.Device, error) {
	ret := _m.Called(deviceId)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*model.Device, error)); ok {
		return rf(deviceId)
	}
	if rf, ok := ret.Get(0).(func(int64) *model.Device); ok {
		r0 = rf(deviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDeviceService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - deviceId int64
func (_e *MockDeviceService_Expecter) Get(deviceId interface{}) *MockDeviceService_Get_Call {
	return &MockDeviceService_Get_Call{Call: _e.mock.On("Get", deviceId)}
}

func (_c *MockDeviceService_Get_Call) Run(run func(deviceId int64)) *MockDeviceService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDeviceService_Get_Call) Return(_a0 *model.Device, _a1 error) *MockDeviceService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceService_Get_Call) RunAndReturn(run func(int64) (*model.Device, error)) *MockDeviceService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *MockDeviceService) GetAll() ([]*model.Device, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.Device, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Device)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockDeviceService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockDeviceService_Expecter) GetAll() *MockDeviceService_GetAll_Call {
	return &MockDeviceService_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockDeviceService_GetAll_Call) Run(run func()) *MockDeviceService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeviceService_GetAll_Call) Return(_a0 []*model.Device, _a1 error) *MockDeviceService_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceService_GetAll_Call) RunAndReturn(run func() ([]*model.Device, error)) *MockDeviceService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// SearchByBrand provides a mock function with given fields: brand
func (_m *MockDeviceService) SearchByBrand(brand string) ([]*model.Device, error) {
	ret := _m.Called(brand)

	if len(ret) == 0 {
		panic("no return value specified for SearchByBrand")
	}

	var r0 []*model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.Device, error)); ok {
		return rf(brand)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.Device); ok {
		r0 = rf(brand)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(brand)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceService_SearchByBrand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchByBrand'
type MockDeviceService_SearchByBrand_Call struct {
	*mock.Call
}

// SearchByBrand is a helper method to define mock.On call
//   - brand string
func (_e *MockDeviceService_Expecter) SearchByBrand(brand interface{}) *MockDeviceService_SearchByBrand_Call {
	return &MockDeviceService_SearchByBrand_Call{Call: _e.mock.On("SearchByBrand", brand)}
}

func (_c *MockDeviceService_SearchByBrand_Call) Run(run func(brand string)) *MockDeviceService_SearchByBrand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceService_SearchByBrand_Call) Return(_a0 []*model.Device, _a1 error) *MockDeviceService_SearchByBrand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceService_SearchByBrand_Call) RunAndReturn(run func(string) ([]*model.Device, error)) *MockDeviceService_SearchByBrand_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: device
func (_m *MockDeviceService) Update(device *model.Device) (*model.Device, error) {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Device) (*model.Device, error)); ok {
		return rf(device)
	}
	if rf, ok := ret.Get(0).(func(*model.Device) *model.Device); ok {
		r0 = rf(device)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Device) error); ok {
		r1 = rf(device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDeviceService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - device *model.Device
func (_e *MockDeviceService_Expecter) Update(device interface{}) *MockDeviceService_Update_Call {
	return &MockDeviceService_Update_Call{Call: _e.mock.On("Update", device)}
}

func (_c *MockDeviceService_Update_Call) Run(run func(device *model.Device)) *MockDeviceService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Device))
	})
	return _c
}

func (_c *MockDeviceService_Update_Call) Return(_a0 *model.Device, _a1 error) *MockDeviceService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceService_Update_Call) RunAndReturn(run func(*model.Device) (*model.Device, error)) *MockDeviceService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePartial provides a mock function with given fields: device
func (_m *MockDeviceService) UpdatePartial(device *model.Device) (*model.Device, error) {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePartial")
	}

	var r0 *model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Device) (*model.Device, error)); ok {
		return rf(device)
	}
	if rf, ok := ret.Get(0).(func(*model.Device) *model.Device); ok {
		r0 = rf(device)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Device) error); ok {
		r1 = rf(device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceService_UpdatePartial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePartial'
type MockDeviceService_UpdatePartial_Call struct {
	*mock.Call
}

// UpdatePartial is a helper method to define mock.On call
//   - device *model.Device
func (_e *MockDeviceService_Expecter) UpdatePartial(device interface{}) *MockDeviceService_UpdatePartial_Call {
	return &MockDeviceService_UpdatePartial_Call{Call: _e.mock.On("UpdatePartial", device)}
}

func (_c *MockDeviceService_UpdatePartial_Call) Run(run func(device *model.Device)) *MockDeviceService_UpdatePartial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Device))
	})
	return _c
}

func (_c *MockDeviceService_UpdatePartial_Call) Return(_a0 *model.Device, _a1 error) *MockDeviceService_UpdatePartial_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceService_UpdatePartial_Call) RunAndReturn(run func(*model.Device) (*model.Device, error)) *MockDeviceService_UpdatePartial_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeviceService creates a new instance of MockDeviceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeviceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeviceService {
	mock := &MockDeviceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
