// Code generated by mockery v2.46.3. DO NOT EDIT.

package interfaces

import (
	model "devices/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// MockDeviceRepository is an autogenerated mock type for the DeviceRepository type
type MockDeviceRepository struct {
	mock.Mock
}

type MockDeviceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeviceRepository) EXPECT() *MockDeviceRepository_Expecter {
	return &MockDeviceRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: _a0
func (_m *MockDeviceRepository) Add(_a0 *model.Device) (*model.Device, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Device) (*model.Device, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.Device) *model.Device); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Device) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockDeviceRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - _a0 *model.Device
func (_e *MockDeviceRepository_Expecter) Add(_a0 interface{}) *MockDeviceRepository_Add_Call {
	return &MockDeviceRepository_Add_Call{Call: _e.mock.On("Add", _a0)}
}

func (_c *MockDeviceRepository_Add_Call) Run(run func(_a0 *model.Device)) *MockDeviceRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Device))
	})
	return _c
}

func (_c *MockDeviceRepository_Add_Call) Return(_a0 *model.Device, _a1 error) *MockDeviceRepository_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceRepository_Add_Call) RunAndReturn(run func(*model.Device) (*model.Device, error)) *MockDeviceRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockDeviceRepository) Delete(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeviceRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDeviceRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int64
func (_e *MockDeviceRepository_Expecter) Delete(id interface{}) *MockDeviceRepository_Delete_Call {
	return &MockDeviceRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockDeviceRepository_Delete_Call) Run(run func(id int64)) *MockDeviceRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDeviceRepository_Delete_Call) Return(_a0 error) *MockDeviceRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceRepository_Delete_Call) RunAndReturn(run func(int64) error) *MockDeviceRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *MockDeviceRepository) GetById(id int64) (*model.Device, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*model.Device, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *model.Device); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockDeviceRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id int64
func (_e *MockDeviceRepository_Expecter) GetById(id interface{}) *MockDeviceRepository_GetById_Call {
	return &MockDeviceRepository_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *MockDeviceRepository_GetById_Call) Run(run func(id int64)) *MockDeviceRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDeviceRepository_GetById_Call) Return(_a0 *model.Device, _a1 error) *MockDeviceRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceRepository_GetById_Call) RunAndReturn(run func(int64) (*model.Device, error)) *MockDeviceRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: limit, offset
func (_m *MockDeviceRepository) List(limit int, offset int) ([]*model.Device, error) {
	ret := _m.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*model.Device, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*model.Device); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockDeviceRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - limit int
//   - offset int
func (_e *MockDeviceRepository_Expecter) List(limit interface{}, offset interface{}) *MockDeviceRepository_List_Call {
	return &MockDeviceRepository_List_Call{Call: _e.mock.On("List", limit, offset)}
}

func (_c *MockDeviceRepository_List_Call) Run(run func(limit int, offset int)) *MockDeviceRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockDeviceRepository_List_Call) Return(_a0 []*model.Device, _a1 error) *MockDeviceRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceRepository_List_Call) RunAndReturn(run func(int, int) ([]*model.Device, error)) *MockDeviceRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// SearchByBrand provides a mock function with given fields: brand
func (_m *MockDeviceRepository) SearchByBrand(brand string) ([]*model.Device, error) {
	ret := _m.Called(brand)

	if len(ret) == 0 {
		panic("no return value specified for SearchByBrand")
	}

	var r0 []*model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.Device, error)); ok {
		return rf(brand)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.Device); ok {
		r0 = rf(brand)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(brand)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceRepository_SearchByBrand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchByBrand'
type MockDeviceRepository_SearchByBrand_Call struct {
	*mock.Call
}

// SearchByBrand is a helper method to define mock.On call
//   - brand string
func (_e *MockDeviceRepository_Expecter) SearchByBrand(brand interface{}) *MockDeviceRepository_SearchByBrand_Call {
	return &MockDeviceRepository_SearchByBrand_Call{Call: _e.mock.On("SearchByBrand", brand)}
}

func (_c *MockDeviceRepository_SearchByBrand_Call) Run(run func(brand string)) *MockDeviceRepository_SearchByBrand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeviceRepository_SearchByBrand_Call) Return(_a0 []*model.Device, _a1 error) *MockDeviceRepository_SearchByBrand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceRepository_SearchByBrand_Call) RunAndReturn(run func(string) ([]*model.Device, error)) *MockDeviceRepository_SearchByBrand_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *MockDeviceRepository) Update(_a0 *model.Device) (*model.Device, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Device) (*model.Device, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.Device) *model.Device); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Device) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDeviceRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 *model.Device
func (_e *MockDeviceRepository_Expecter) Update(_a0 interface{}) *MockDeviceRepository_Update_Call {
	return &MockDeviceRepository_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *MockDeviceRepository_Update_Call) Run(run func(_a0 *model.Device)) *MockDeviceRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Device))
	})
	return _c
}

func (_c *MockDeviceRepository_Update_Call) Return(_a0 *model.Device, _a1 error) *MockDeviceRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceRepository_Update_Call) RunAndReturn(run func(*model.Device) (*model.Device, error)) *MockDeviceRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeviceRepository creates a new instance of MockDeviceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeviceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeviceRepository {
	mock := &MockDeviceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
